dfball = pd.DataFrame()dfball['Frame'] = dfaway[1]dfball['X'] = np.zeros(len(dfball)) #initiating the dataframe at 0's (implying the ball will be at (0,0) when out of possession)dfball['Y'] = np.zeros(len(dfball))x,y = field_dim[0], field_dim[1]Sideline = [[0.375*x,-y/2],[0.125*x,-y/2],[-0.125*x,-y/2],[-0.375*x,-y/2],[-0.375*x,y/2],[-0.125*x,y/2],[0.125*x,y/2],[0.375*x,y/2]]Endline = [[-x/2,-y/4],[-x/2,0],[-x/2,y/4],[x/2,y/4],[x/2,0],[x/2,-y/4]]GoalPos = [Endline[1],Endline[4]]simp = FalseSamePlayer = False #Flag to determine if the transition happened from a player to himself, in which case the ball will be glued to his positioni=0while i < len(dfcodes)-1:    dif = True #Flag that tells us whether there is a single event in a frame    if int(dfcodes.iloc[[i+1]][0]) == int(dfcodes.iloc[[i]][0]): #Skip repeated frames        i += 1        dif = False    if int(dfcodes.iloc[[i]][1]) > 2 and dif:        if int(dfcodes.iloc[[i+1]][1]) > 2:            i += 1        else:            frame = int(dfcodes.iloc[[i+1]][0]) - 1 #We consider the frame before the ball is put back into play to have initial velocity of 0            if int(dfcodes.iloc[[i+1]][1]) == 1:                dfball.loc[(dfball.Frame == frame),['X','Y']] = list(dfhome.loc[dfhome[1] == frame + 1][2*int(dfcodes.iloc[[i+1]][2])])[0],list(dfhome.loc[dfhome[1] == frame + 1][2*int(dfcodes.iloc[[i+1]][2])+1])[0]            else:                dfball.loc[(dfball.Frame == frame),['X','Y']] = list(dfaway.loc[dfaway[1] == frame + 1][2*int(dfcodes.iloc[[i+1]][2])])[0],list(dfaway.loc[dfaway[1] == frame + 1][2*int(dfcodes.iloc[[i+1]][2])+1])[0]            i += 1    elif int(dfcodes.iloc[[i]][1]) == 1 and dif:        if int(dfcodes.iloc[[i+1]][1]) == 3:            simp = True #A flag that allows us to know how to determine the final position at the end (different events lead to different approaches)            FinalPosition = Sideline[int(dfcodes.iloc[[i+1]][2])-1]            frame = int(dfcodes.iloc[[i]][0])            InitialPosition = [dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame        if int(dfcodes.iloc[[i+1]][1]) == 4:            simp = True            FinalPosition = Endline[int(dfcodes.iloc[[i+1]][2])-1]            frame = int(dfcodes.iloc[[i]][0])            InitialPosition = [dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame        if int(dfcodes.iloc[[i+1]][1]) == 6:            simp = True            FinalPosition = GoalPos[int(dfcodes.iloc[[i+1]][2])-1]            frame = int(dfcodes.iloc[[i]][0])            InitialPosition = [dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame        if int(dfcodes.iloc[[i+1]][1]) == 7:            frame = int(dfcodes.iloc[[i]][0])            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame            InitialPosition = [dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalPosition = [dfhome.loc[dfhome[1] == FinalFrame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == FinalFrame][2*int(dfcodes.iloc[[i]][2])+1]]        if int(dfcodes.iloc[[i+1]][1]) == 2:            frame = int(dfcodes.iloc[[i]][0])            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame            InitialPosition = [dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalPosition = [dfaway.loc[dfaway[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])],dfaway.loc[dfaway[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])+1]]        if int(dfcodes.iloc[[i+1]][1]) == 1:            if int(dfcodes.iloc[[i+1]][2]) == int(dfcodes.iloc[[i]][2]):                SamePlayer = True                for frame in range (int(dfcodes.iloc[[i]][0]),int(dfcodes.iloc[[i+1]][0])):                    dfball.loc[(dfball.Frame == frame),['X','Y']] = list(dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])])[0],list(dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i+1]][2])+1])[0]            frame = int(dfcodes.iloc[[i]][0])            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame            InitialPosition = [dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfhome.loc[dfhome[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalPosition = [dfhome.loc[dfhome[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])],dfhome.loc[dfhome[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])+1]]        j=0        if simp and not SamePlayer:            while j <= time:                InitialPosition[0] = list(InitialPosition[0])                InitialPosition[1] = list(InitialPosition[1])                dist = [FinalPosition[0]-InitialPosition[0][0],FinalPosition[1]-InitialPosition[1][0]]                Deltad = [x/time for x in dist]                dfball.loc[(dfball.Frame == frame + j),['X','Y']] = InitialPosition[0][0] + j*Deltad[0], InitialPosition[1][0] + j*Deltad[1]                j += 1        elif not SamePlayer:            while j <= time:                InitialPosition[0] = list(InitialPosition[0])                FinalPosition[0] = list(FinalPosition[0])                InitialPosition[1] = list(InitialPosition[1])                FinalPosition[1] = list(FinalPosition[1])                dist = [FinalPosition[0][0]-InitialPosition[0][0],FinalPosition[1][0]-InitialPosition[1][0]]                Deltad = [x/time for x in dist]                dfball.loc[(dfball.Frame == frame + j),['X','Y']] = InitialPosition[0][0] + j*Deltad[0], InitialPosition[1][0] + j*Deltad[1]                j += 1        simp = False        SamePlayer = False        i += 1    elif int(dfcodes.iloc[[i]][1]) == 2 and dif:        if int(dfcodes.iloc[[i+1]][1]) == 3:            simp = True            FinalPosition = Sideline[int(dfcodes.iloc[[i+1]][2])-1]            frame = int(dfcodes.iloc[[i]][0])            InitialPosition = [dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame        if int(dfcodes.iloc[[i+1]][1]) == 4:            simp = True            FinalPosition = Endline[int(dfcodes.iloc[[i+1]][2])-1]            frame = int(dfcodes.iloc[[i]][0])            InitialPosition = [dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame        if int(dfcodes.iloc[[i+1]][1]) == 6:            simp = True            FinalPosition = GoalPos[int(dfcodes.iloc[[i+1]][2])-1]            frame = int(dfcodes.iloc[[i]][0])            InitialPosition = [dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame        if int(dfcodes.iloc[[i+1]][1]) == 7:            frame = int(dfcodes.iloc[[i]][0])            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame            InitialPosition = [dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalPosition = [dfaway.loc[dfaway[1] == FinalFrame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == FinalFrame][2*int(dfcodes.iloc[[i]][2])+1]]        if int(dfcodes.iloc[[i+1]][1]) == 1:            frame = int(dfcodes.iloc[[i]][0])            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame            InitialPosition = [dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalPosition = [dfhome.loc[dfhome[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])],dfhome.loc[dfhome[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])+1]]        if int(dfcodes.iloc[[i+1]][1]) == 2:            if int(dfcodes.iloc[[i+1]][2]) == int(dfcodes.iloc[[i]][2]):                SamePlayer = True                for frame in range (int(dfcodes.iloc[[i]][0]),int(dfcodes.iloc[[i+1]][0])):                    dfball.loc[(dfball.Frame == frame),['X','Y']] = list(dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])])[0],list(dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i+1]][2])+1])[0]            frame = int(dfcodes.iloc[[i]][0])            FinalFrame = int(dfcodes.iloc[[i+1]][0])            time = FinalFrame - frame            InitialPosition = [dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])],dfaway.loc[dfaway[1] == frame][2*int(dfcodes.iloc[[i]][2])+1]]            FinalPosition = [dfaway.loc[dfaway[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])],dfaway.loc[dfaway[1] == FinalFrame][2*int(dfcodes.iloc[[i+1]][2])+1]]        j=0        if simp and not SamePlayer: #The ball is assumed to move at constant speed from initial to final position            while j <= time:                InitialPosition[0] = list(InitialPosition[0])                InitialPosition[1] = list(InitialPosition[1])                dist = [FinalPosition[0]-InitialPosition[0][0],FinalPosition[1]-InitialPosition[1][0]]                Deltad = [x/time for x in dist]                dfball.loc[(dfball.Frame == frame + j),['X','Y']] = InitialPosition[0][0] + j*Deltad[0], InitialPosition[1][0] + j*Deltad[1]                j += 1        elif not SamePlayer:            while j <= time:                InitialPosition[0] = list(InitialPosition[0])                FinalPosition[0] = list(FinalPosition[0])                InitialPosition[1] = list(InitialPosition[1])                FinalPosition[1] = list(FinalPosition[1])                dist = [FinalPosition[0][0]-InitialPosition[0][0],FinalPosition[1][0]-InitialPosition[1][0]]                Deltad = [x/time for x in dist]                dfball.loc[(dfball.Frame == frame + j),['X','Y']] = InitialPosition[0][0] + j*Deltad[0], InitialPosition[1][0] + j*Deltad[1]                j += 1        simp = False        SamePlayer = False        i += 1